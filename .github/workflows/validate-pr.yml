---
name: 'Validate pull request'

on: [workflow_dispatch, pull_request]

defaults:
  run:
    shell: bash

jobs:
  tests:
    name: 'Run tests'
    runs-on: ubuntu-latest
    if: github.event.repository.name != 'go-template'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Get go version'
        id: goversion
        run: |
          set -eo pipefail
          version="$(< .go-version)"
          echo "::set-output name=version::$version"
      - name: 'Setup go'
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.goversion.outputs.version }}

      - name: 'Install dependencies'
        run: go mod download

      - name: 'Run tests'
        run: go test -v ./...

  precommit:
    name: 'Run precommit check'
    runs-on: ubuntu-latest
    if: github.event.repository.name != 'go-template'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup python'
        uses: actions/setup-python@v2

      - name: 'Get go version'
        id: goversion
        run: |
          set -eo pipefail
          version="$(< .go-version)"
          echo "::set-output name=version::$version"
      - name: 'Setup go'
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.goversion.outputs.version }}

      - name: 'Run pre-commit check'
        uses: pre-commit/action@v2.0.0

  integration:
    name: 'Run integration tests'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Get go version'
        id: goversion
        run: |
          set -eo pipefail
          version="$(< .go-version)"
          echo "::set-output name=version::$version"
      - name: 'Setup go'
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.goversion.outputs.version }}

      - name: 'Install dependencies'
        run: brew install bats-core jq

      - name: 'Run GoReleaser'
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: snapshot --rm-dist

      - name: 'Run integration tests'
        env:
          TEST_SSM2ENV_PREFIX: ${{ secrets.TF_VAR_PREFIX }}
          TEST_SSM2ENV_PARAMETERS: ${{ secrets.TF_VAR_PARAMETERS }}
          TEST_SSM2ENV_EXECUTABLE: dist/ssm2env_linux_amd64/ssm2env
          TEST_SSM2ENV_INTEGRATION: 0
        run: bats -r 'bats/*.bats'
